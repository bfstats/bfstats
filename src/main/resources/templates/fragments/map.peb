<div class="clear">
  <div class="map_point_legend map_point_kills" style="float:left;"></div>
  <span style="float:left;">Kills ({{map.killEvents.size}})</span>
  <div class="map_point_legend map_point_deaths" style="float:left;"></div>
  <span style="float:left;">Deaths ({{map.deathEvents.size}})</span>
</div>

<script>
document.addEventListener("DOMContentLoaded", function(){
	var nativeWidth = 1024;
	var nativeHeight = 1024;

  var mapLargeContainer = document.getElementById("map_large_container");
  var mapLargeContainerWidth = 175;
  var mapLargeContainerHeight = 175;

  var a = mapLargeContainerWidth / 2;
  var b = mapLargeContainerHeight / 2;

  var mapLargeContent = mapLargeContainer.querySelector(".map_bg");
  mapLargeContent.style.width = nativeWidth;
  mapLargeContent.style.height = nativeHeight;

  var smallEl = document.querySelector(".small");
  var smallWidth = smallEl.offsetWidth;
  var smallHeight = smallEl.offsetHeight;

  var magnifyEl = document.querySelector(".magnify");

  magnifyEl.addEventListener("mousemove", function(e) {
    //x/y coordinates of the mouse
    //This is the position of .magnify with respect to the document.

    var magnifyWidth = magnifyEl.clientWidth;
    var magnifyHeight = magnifyEl.clientWidth;

    //We will deduct the positions of .magnify from the mouse positions with
    //respect to the document to get the mouse positions with respect to the
    //container(.magnify)
    var mx = e.pageX - magnifyEl.offsetLeft;
    var my = e.pageY - magnifyEl.offsetTop;



    //Finally the code to fade out the glass if the mouse is outside the container
    if (
      mx < magnifyWidth &&
      my < magnifyHeight &&
      mx > 0 &&
      my > 0
    ) {
      mapLargeContainer.classList.remove("hidden");
    } else {
      mapLargeContainer.classList.add("hidden");
    }

    if (mapLargeContainer.style.display != "none") {
      //The position of mapLargeContainer's actual content will be changed according to the position
      //of the mouse over the .small image. So we will get the ratio of the pixel
      //under the mouse pointer with respect to the image and use that to position the
      //large image inside the magnifying glass


      //Time to move the magnifying glass with the mouse
      var magnifierX = mx - a;
      var magnifierY = my - b;

      var contentX = -Math.round(mx/smallWidth * nativeWidth - a);
      var contentY = -Math.round(my/smallHeight * nativeHeight - b);

      //Now the glass moves with the mouse
      //The logic is to deduct half of the glass's width and height from the
      //mouse coordinates to place it with its center at the mouse coordinates

      //If you hover on the image now, you should see the magnifying glass in action
      // luup
      mapLargeContainer.style.transform = 'translate(' + magnifierX + 'px, ' + magnifierY + 'px)';
      // luubi sisu
      mapLargeContent.style.transform = 'translate(' + contentX + 'px, ' + contentY + 'px)';
    }
  });

})
</script>

{% macro renderMap(map, cssClass, imagePath) %}
  <div class="map_bg {{cssClass}}" style="background-image: url({{ publicAt(imagePath) }});">
    {% for event in map.killEvents %}
    <div class="map_point map_point_kills"
      title="{{event.time | dt("HH:mm") }} {{event.killerPlayerName}} [{{event.killWeapon.name}}] {{event.playerName}}"
      style="left: {{ event.location.x*100/map.mapSize }}%; bottom: {{ event.location.z*100/map.mapSize}}%;"></div>
    {% endfor %}

    {% for event in map.deathEvents %}
    <div class="map_point map_point_deaths"
      title="{{event.time | dt("HH:mm") }} {{event.playerName}} killed by {{event.killerPlayerName}} [{{event.killWeapon.name}}]"
      style="left: {{ event.location.x*100/map.mapSize }}%; bottom: {{ event.location.z*100/map.mapSize}}%;"></div>
    {% endfor %}
  </div>
{% endmacro %}

<!-- Lets make a simple image magnifier -->
<div class="magnify">
{{renderMap(map, 'small', 'img/maps/radar/' + map.mapFileName + '.png')}}

<div id="map_large_container" class="hidden large">
{{renderMap(map, 'large', 'img/maps/lightmap/' + map.mapFileName + '.png')}}
</div>
</div>