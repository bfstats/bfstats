/*
 * This file is generated by jOOQ.
*/
package io.github.bfvstats.game.jooq.tables;


import io.github.bfvstats.game.jooq.DefaultSchema;
import io.github.bfvstats.game.jooq.Indexes;
import io.github.bfvstats.game.jooq.Keys;
import io.github.bfvstats.game.jooq.tables.records.RoundPlayerScoreEventRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoundPlayerScoreEvent extends TableImpl<RoundPlayerScoreEventRecord> {

    private static final long serialVersionUID = -2097614504;

    /**
     * The reference instance of <code>round_player_score_event</code>
     */
    public static final RoundPlayerScoreEvent ROUND_PLAYER_SCORE_EVENT = new RoundPlayerScoreEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoundPlayerScoreEventRecord> getRecordType() {
        return RoundPlayerScoreEventRecord.class;
    }

    /**
     * The column <code>round_player_score_event.id</code>.
     */
    public final TableField<RoundPlayerScoreEventRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>round_player_score_event.round_id</code>.
     */
    public final TableField<RoundPlayerScoreEventRecord, Integer> ROUND_ID = createField("round_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>round_player_score_event.player_id</code>.
     */
    public final TableField<RoundPlayerScoreEventRecord, Integer> PLAYER_ID = createField("player_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>round_player_score_event.player_location_x</code>.
     */
    public final TableField<RoundPlayerScoreEventRecord, BigDecimal> PLAYER_LOCATION_X = createField("player_location_x", org.jooq.impl.SQLDataType.NUMERIC(4, 4).nullable(false), this, "");

    /**
     * The column <code>round_player_score_event.player_location_y</code>.
     */
    public final TableField<RoundPlayerScoreEventRecord, BigDecimal> PLAYER_LOCATION_Y = createField("player_location_y", org.jooq.impl.SQLDataType.NUMERIC(4, 4).nullable(false), this, "");

    /**
     * The column <code>round_player_score_event.player_location_z</code>.
     */
    public final TableField<RoundPlayerScoreEventRecord, BigDecimal> PLAYER_LOCATION_Z = createField("player_location_z", org.jooq.impl.SQLDataType.NUMERIC(4, 4).nullable(false), this, "");

    /**
     * The column <code>round_player_score_event.event_time</code>.
     */
    public final TableField<RoundPlayerScoreEventRecord, Timestamp> EVENT_TIME = createField("event_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>round_player_score_event.score_type</code>.
     */
    public final TableField<RoundPlayerScoreEventRecord, String> SCORE_TYPE = createField("score_type", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * Create a <code>round_player_score_event</code> table reference
     */
    public RoundPlayerScoreEvent() {
        this(DSL.name("round_player_score_event"), null);
    }

    /**
     * Create an aliased <code>round_player_score_event</code> table reference
     */
    public RoundPlayerScoreEvent(String alias) {
        this(DSL.name(alias), ROUND_PLAYER_SCORE_EVENT);
    }

    /**
     * Create an aliased <code>round_player_score_event</code> table reference
     */
    public RoundPlayerScoreEvent(Name alias) {
        this(alias, ROUND_PLAYER_SCORE_EVENT);
    }

    private RoundPlayerScoreEvent(Name alias, Table<RoundPlayerScoreEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoundPlayerScoreEvent(Name alias, Table<RoundPlayerScoreEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROUND_PLAYER_SCORE_PLAYER_ID_IDX, Indexes.ROUND_PLAYER_SCORE_ROUND_ID_IDX, Indexes.ROUND_PLAYER_SCORE_TYPE_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RoundPlayerScoreEventRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ROUND_PLAYER_SCORE_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RoundPlayerScoreEventRecord> getPrimaryKey() {
        return Keys.PK_ROUND_PLAYER_SCORE_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RoundPlayerScoreEventRecord>> getKeys() {
        return Arrays.<UniqueKey<RoundPlayerScoreEventRecord>>asList(Keys.PK_ROUND_PLAYER_SCORE_EVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RoundPlayerScoreEventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RoundPlayerScoreEventRecord, ?>>asList(Keys.FK_ROUND_PLAYER_SCORE_EVENT_ROUND_1, Keys.FK_ROUND_PLAYER_SCORE_EVENT_PLAYER_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundPlayerScoreEvent as(String alias) {
        return new RoundPlayerScoreEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundPlayerScoreEvent as(Name alias) {
        return new RoundPlayerScoreEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoundPlayerScoreEvent rename(String name) {
        return new RoundPlayerScoreEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoundPlayerScoreEvent rename(Name name) {
        return new RoundPlayerScoreEvent(name, null);
    }
}
