/*
 * This file is generated by jOOQ.
*/
package io.github.bfstats.dbstats.jooq.tables;


import io.github.bfstats.dbstats.jooq.DefaultSchema;
import io.github.bfstats.dbstats.jooq.tables.records.RoundPlayerJoinLeftRecord;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoundPlayerJoinLeft extends TableImpl<RoundPlayerJoinLeftRecord> {

    private static final long serialVersionUID = 1555282940;

    /**
     * The reference instance of <code>round_player_join_left</code>
     */
    public static final RoundPlayerJoinLeft ROUND_PLAYER_JOIN_LEFT = new RoundPlayerJoinLeft();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoundPlayerJoinLeftRecord> getRecordType() {
        return RoundPlayerJoinLeftRecord.class;
    }

    /**
     * The column <code>round_player_join_left.round_id</code>.
     */
    public final TableField<RoundPlayerJoinLeftRecord, Integer> ROUND_ID = createField("round_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>round_player_join_left.player_id</code>.
     */
    public final TableField<RoundPlayerJoinLeftRecord, Integer> PLAYER_ID = createField("player_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>round_player_join_left.event_time</code>.
     */
    public final TableField<RoundPlayerJoinLeftRecord, Timestamp> EVENT_TIME = createField("event_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<RoundPlayerJoinLeftRecord, Object> STATUS = createField("status", org.jooq.impl.DefaultDataType.getDefaultDataType(""), this, "");

    /**
     * Create a <code>round_player_join_left</code> table reference
     */
    public RoundPlayerJoinLeft() {
        this(DSL.name("round_player_join_left"), null);
    }

    /**
     * Create an aliased <code>round_player_join_left</code> table reference
     */
    public RoundPlayerJoinLeft(String alias) {
        this(DSL.name(alias), ROUND_PLAYER_JOIN_LEFT);
    }

    /**
     * Create an aliased <code>round_player_join_left</code> table reference
     */
    public RoundPlayerJoinLeft(Name alias) {
        this(alias, ROUND_PLAYER_JOIN_LEFT);
    }

    private RoundPlayerJoinLeft(Name alias, Table<RoundPlayerJoinLeftRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoundPlayerJoinLeft(Name alias, Table<RoundPlayerJoinLeftRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundPlayerJoinLeft as(String alias) {
        return new RoundPlayerJoinLeft(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundPlayerJoinLeft as(Name alias) {
        return new RoundPlayerJoinLeft(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoundPlayerJoinLeft rename(String name) {
        return new RoundPlayerJoinLeft(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoundPlayerJoinLeft rename(Name name) {
        return new RoundPlayerJoinLeft(name, null);
    }
}
