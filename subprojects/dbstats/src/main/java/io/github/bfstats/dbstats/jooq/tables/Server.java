/*
 * This file is generated by jOOQ.
*/
package io.github.bfstats.dbstats.jooq.tables;


import io.github.bfstats.dbstats.jooq.DefaultSchema;
import io.github.bfstats.dbstats.jooq.Keys;
import io.github.bfstats.dbstats.jooq.tables.records.ServerRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Server extends TableImpl<ServerRecord> {

    private static final long serialVersionUID = -1020534561;

    /**
     * The reference instance of <code>server</code>
     */
    public static final Server SERVER = new Server();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerRecord> getRecordType() {
        return ServerRecord.class;
    }

    /**
     * The column <code>server.id</code>.
     */
    public final TableField<ServerRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>server.ip</code>.
     */
    public final TableField<ServerRecord, Integer> IP = createField("ip", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>server.port</code>.
     */
    public final TableField<ServerRecord, Integer> PORT = createField("port", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>server.name</code>.
     */
    public final TableField<ServerRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>server.timezone_name</code>.
     */
    public final TableField<ServerRecord, String> TIMEZONE_NAME = createField("timezone_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'GMT'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>server</code> table reference
     */
    public Server() {
        this(DSL.name("server"), null);
    }

    /**
     * Create an aliased <code>server</code> table reference
     */
    public Server(String alias) {
        this(DSL.name(alias), SERVER);
    }

    /**
     * Create an aliased <code>server</code> table reference
     */
    public Server(Name alias) {
        this(alias, SERVER);
    }

    private Server(Name alias, Table<ServerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Server(Name alias, Table<ServerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ServerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SERVER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServerRecord> getPrimaryKey() {
        return Keys.PK_SERVER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServerRecord>> getKeys() {
        return Arrays.<UniqueKey<ServerRecord>>asList(Keys.PK_SERVER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Server as(String alias) {
        return new Server(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Server as(Name alias) {
        return new Server(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Server rename(String name) {
        return new Server(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Server rename(Name name) {
        return new Server(name, null);
    }
}
