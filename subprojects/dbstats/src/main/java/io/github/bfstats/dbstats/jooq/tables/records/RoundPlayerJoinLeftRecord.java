/*
 * This file is generated by jOOQ.
*/
package io.github.bfstats.dbstats.jooq.tables.records;


import io.github.bfstats.dbstats.jooq.tables.RoundPlayerJoinLeft;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoundPlayerJoinLeftRecord extends TableRecordImpl<RoundPlayerJoinLeftRecord> implements Record4<Integer, Integer, Timestamp, Object> {

    private static final long serialVersionUID = 157846493;

    /**
     * Setter for <code>round_player_join_left.round_id</code>.
     */
    public void setRoundId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>round_player_join_left.round_id</code>.
     */
    public Integer getRoundId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>round_player_join_left.player_id</code>.
     */
    public void setPlayerId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>round_player_join_left.player_id</code>.
     */
    public Integer getPlayerId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>round_player_join_left.event_time</code>.
     */
    public void setEventTime(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>round_player_join_left.event_time</code>.
     */
    public Timestamp getEventTime() {
        return (Timestamp) get(2);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public void setStatus(Object value) {
        set(3, value);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public Object getStatus() {
        return get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Timestamp, Object> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Timestamp, Object> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return RoundPlayerJoinLeft.ROUND_PLAYER_JOIN_LEFT.ROUND_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return RoundPlayerJoinLeft.ROUND_PLAYER_JOIN_LEFT.PLAYER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field3() {
        return RoundPlayerJoinLeft.ROUND_PLAYER_JOIN_LEFT.EVENT_TIME;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Field<Object> field4() {
        return RoundPlayerJoinLeft.ROUND_PLAYER_JOIN_LEFT.STATUS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getRoundId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getPlayerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component3() {
        return getEventTime();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object component4() {
        return getStatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getRoundId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getPlayerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value3() {
        return getEventTime();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object value4() {
        return getStatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundPlayerJoinLeftRecord value1(Integer value) {
        setRoundId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundPlayerJoinLeftRecord value2(Integer value) {
        setPlayerId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundPlayerJoinLeftRecord value3(Timestamp value) {
        setEventTime(value);
        return this;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public RoundPlayerJoinLeftRecord value4(Object value) {
        setStatus(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundPlayerJoinLeftRecord values(Integer value1, Integer value2, Timestamp value3, Object value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RoundPlayerJoinLeftRecord
     */
    public RoundPlayerJoinLeftRecord() {
        super(RoundPlayerJoinLeft.ROUND_PLAYER_JOIN_LEFT);
    }

    /**
     * Create a detached, initialised RoundPlayerJoinLeftRecord
     */
    public RoundPlayerJoinLeftRecord(Integer roundId, Integer playerId, Timestamp eventTime, Object status) {
        super(RoundPlayerJoinLeft.ROUND_PLAYER_JOIN_LEFT);

        set(0, roundId);
        set(1, playerId);
        set(2, eventTime);
        set(3, status);
    }
}
