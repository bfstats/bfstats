/*
 * This file is generated by jOOQ.
*/
package io.github.bfstats.game.jooq.tables;


import io.github.bfstats.game.jooq.DefaultSchema;
import io.github.bfstats.game.jooq.Indexes;
import io.github.bfstats.game.jooq.Keys;
import io.github.bfstats.game.jooq.tables.records.PlayerNicknameRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerNickname extends TableImpl<PlayerNicknameRecord> {

    private static final long serialVersionUID = 744744912;

    /**
     * The reference instance of <code>player_nickname</code>
     */
    public static final PlayerNickname PLAYER_NICKNAME = new PlayerNickname();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerNicknameRecord> getRecordType() {
        return PlayerNicknameRecord.class;
    }

    /**
     * The column <code>player_nickname.id</code>.
     */
    public final TableField<PlayerNicknameRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>player_nickname.player_id</code>.
     */
    public final TableField<PlayerNicknameRecord, Integer> PLAYER_ID = createField("player_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>player_nickname.nickname</code>.
     */
    public final TableField<PlayerNicknameRecord, String> NICKNAME = createField("nickname", org.jooq.impl.SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>player_nickname.times_used</code>.
     */
    public final TableField<PlayerNicknameRecord, Integer> TIMES_USED = createField("times_used", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>player_nickname</code> table reference
     */
    public PlayerNickname() {
        this(DSL.name("player_nickname"), null);
    }

    /**
     * Create an aliased <code>player_nickname</code> table reference
     */
    public PlayerNickname(String alias) {
        this(DSL.name(alias), PLAYER_NICKNAME);
    }

    /**
     * Create an aliased <code>player_nickname</code> table reference
     */
    public PlayerNickname(Name alias) {
        this(alias, PLAYER_NICKNAME);
    }

    private PlayerNickname(Name alias, Table<PlayerNicknameRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerNickname(Name alias, Table<PlayerNicknameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLAYER_NICKNAME_PLAYER_ID_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PlayerNicknameRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PLAYER_NICKNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlayerNicknameRecord> getPrimaryKey() {
        return Keys.PK_PLAYER_NICKNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlayerNicknameRecord>> getKeys() {
        return Arrays.<UniqueKey<PlayerNicknameRecord>>asList(Keys.PK_PLAYER_NICKNAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PlayerNicknameRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PlayerNicknameRecord, ?>>asList(Keys.FK_PLAYER_NICKNAME_PLAYER_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerNickname as(String alias) {
        return new PlayerNickname(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerNickname as(Name alias) {
        return new PlayerNickname(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerNickname rename(String name) {
        return new PlayerNickname(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerNickname rename(Name name) {
        return new PlayerNickname(name, null);
    }
}
