/*
 * This file is generated by jOOQ.
*/
package io.github.bfstats.dbstats.jooq.tables;


import io.github.bfstats.dbstats.jooq.DefaultSchema;
import io.github.bfstats.dbstats.jooq.Indexes;
import io.github.bfstats.dbstats.jooq.Keys;
import io.github.bfstats.dbstats.jooq.tables.records.RoundPlayerDeployObjectRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoundPlayerDeployObject extends TableImpl<RoundPlayerDeployObjectRecord> {

    private static final long serialVersionUID = -1688178834;

    /**
     * The reference instance of <code>round_player_deploy_object</code>
     */
    public static final RoundPlayerDeployObject ROUND_PLAYER_DEPLOY_OBJECT = new RoundPlayerDeployObject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoundPlayerDeployObjectRecord> getRecordType() {
        return RoundPlayerDeployObjectRecord.class;
    }

    /**
     * The column <code>round_player_deploy_object.id</code>.
     */
    public final TableField<RoundPlayerDeployObjectRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>round_player_deploy_object.round_id</code>.
     */
    public final TableField<RoundPlayerDeployObjectRecord, Integer> ROUND_ID = createField("round_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>round_player_deploy_object.player_id</code>.
     */
    public final TableField<RoundPlayerDeployObjectRecord, Integer> PLAYER_ID = createField("player_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>round_player_deploy_object.player_location_x</code>.
     */
    public final TableField<RoundPlayerDeployObjectRecord, BigDecimal> PLAYER_LOCATION_X = createField("player_location_x", org.jooq.impl.SQLDataType.NUMERIC(4, 4).nullable(false), this, "");

    /**
     * The column <code>round_player_deploy_object.player_location_y</code>.
     */
    public final TableField<RoundPlayerDeployObjectRecord, BigDecimal> PLAYER_LOCATION_Y = createField("player_location_y", org.jooq.impl.SQLDataType.NUMERIC(4, 4).nullable(false), this, "");

    /**
     * The column <code>round_player_deploy_object.player_location_z</code>.
     */
    public final TableField<RoundPlayerDeployObjectRecord, BigDecimal> PLAYER_LOCATION_Z = createField("player_location_z", org.jooq.impl.SQLDataType.NUMERIC(4, 4).nullable(false), this, "");

    /**
     * The column <code>round_player_deploy_object.object</code>.
     */
    public final TableField<RoundPlayerDeployObjectRecord, String> OBJECT = createField("object", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>round_player_deploy_object.event_time</code>.
     */
    public final TableField<RoundPlayerDeployObjectRecord, Timestamp> EVENT_TIME = createField("event_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>round_player_deploy_object</code> table reference
     */
    public RoundPlayerDeployObject() {
        this(DSL.name("round_player_deploy_object"), null);
    }

    /**
     * Create an aliased <code>round_player_deploy_object</code> table reference
     */
    public RoundPlayerDeployObject(String alias) {
        this(DSL.name(alias), ROUND_PLAYER_DEPLOY_OBJECT);
    }

    /**
     * Create an aliased <code>round_player_deploy_object</code> table reference
     */
    public RoundPlayerDeployObject(Name alias) {
        this(alias, ROUND_PLAYER_DEPLOY_OBJECT);
    }

    private RoundPlayerDeployObject(Name alias, Table<RoundPlayerDeployObjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoundPlayerDeployObject(Name alias, Table<RoundPlayerDeployObjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROUND_PLAYER_DEPLOY_OBJECT_PLAYER_ID_IDX, Indexes.ROUND_PLAYER_DEPLOY_OBJECT_ROUND_ID_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RoundPlayerDeployObjectRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ROUND_PLAYER_DEPLOY_OBJECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RoundPlayerDeployObjectRecord> getPrimaryKey() {
        return Keys.PK_ROUND_PLAYER_DEPLOY_OBJECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RoundPlayerDeployObjectRecord>> getKeys() {
        return Arrays.<UniqueKey<RoundPlayerDeployObjectRecord>>asList(Keys.PK_ROUND_PLAYER_DEPLOY_OBJECT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RoundPlayerDeployObjectRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RoundPlayerDeployObjectRecord, ?>>asList(Keys.FK_ROUND_PLAYER_DEPLOY_OBJECT_ROUND_1, Keys.FK_ROUND_PLAYER_DEPLOY_OBJECT_PLAYER_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundPlayerDeployObject as(String alias) {
        return new RoundPlayerDeployObject(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundPlayerDeployObject as(Name alias) {
        return new RoundPlayerDeployObject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoundPlayerDeployObject rename(String name) {
        return new RoundPlayerDeployObject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoundPlayerDeployObject rename(Name name) {
        return new RoundPlayerDeployObject(name, null);
    }
}
